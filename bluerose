#!/usr/bin/env python

import chess
import threading
import time
import sys


MAX_SCORE = 100
TIME_DENOM = 30

POSITION_VALUES = [
    # King (end game)
    [
    -50,-40,-30,-20,-20,-30,-40,-50,
    -30,-20,-10,  0,  0,-10,-20,-30,
    -30,-10, 20, 30, 30, 20,-10,-30,
    -30,-10, 30, 40, 40, 30,-10,-30,
    -30,-10, 30, 40, 40, 30,-10,-30,
    -30,-10, 20, 30, 30, 20,-10,-30,
    -30,-30,  0,  0,  0,  0,-30,-30,
    -50,-30,-30,-30,-30,-30,-30,-50,
    ]
    # Pawn
    [
    0,  0,  0,  0,  0,  0,  0,  0,
    50, 50, 50, 50, 50, 50, 50, 50,
    10, 10, 20, 30, 30, 20, 10, 10,
     5,  5, 10, 25, 25, 10,  5,  5,
     0,  0,  0, 20, 20,  0,  0,  0,
     5, -5,-10,  0,  0,-10, -5,  5,
     5, 10, 10,-20,-20, 10, 10,  5,
     0,  0,  0,  0,  0,  0,  0,  0,
     ],
    # Knight
    [
    -50,-40,-30,-30,-30,-30,-40,-50,
    -40,-20,  0,  0,  0,  0,-20,-40,
    -30,  0, 10, 15, 15, 10,  0,-30,
    -30,  5, 15, 20, 20, 15,  5,-30,
    -30,  0, 15, 20, 20, 15,  0,-30,
    -30,  5, 10, 15, 15, 10,  5,-30,
    -40,-20,  0,  5,  5,  0,-20,-40,
    -50,-40,-30,-30,-30,-30,-40,-50,
    ],
    # Bishop
    [
    -20,-10,-10,-10,-10,-10,-10,-20,
    -10,  0,  0,  0,  0,  0,  0,-10,
    -10,  0,  5, 10, 10,  5,  0,-10,
    -10,  5,  5, 10, 10,  5,  5,-10,
    -10,  0, 10, 10, 10, 10,  0,-10,
    -10, 10, 10, 10, 10, 10, 10,-10,
    -10,  5,  0,  0,  0,  0,  5,-10,
    -20,-10,-10,-10,-10,-10,-10,-20,
    ],
    # Rook
    [
     0,  0,  0,  0,  0,  0,  0,  0,
     5, 10, 10, 10, 10, 10, 10,  5,
    -5,  0,  0,  0,  0,  0,  0, -5,
    -5,  0,  0,  0,  0,  0,  0, -5,
    -5,  0,  0,  0,  0,  0,  0, -5,
    -5,  0,  0,  0,  0,  0,  0, -5,
    -5,  0,  0,  0,  0,  0,  0, -5,
     0,  0,  0,  5,  5,  0,  0,  0,
    ],
    # Queen
    [
    -20,-10,-10, -5, -5,-10,-10,-20,
    -10,  0,  0,  0,  0,  0,  0,-10,
    -10,  0,  5,  5,  5,  5,  0,-10,
     -5,  0,  5,  5,  5,  5,  0, -5,
      0,  0,  5,  5,  5,  5,  0, -5,
    -10,  5,  5,  5,  5,  5,  0,-10,
    -10,  0,  5,  0,  0,  0,  0,-10,
    -20,-10,-10, -5, -5,-10,-10,-20,
    ],
    # King
    [
    -30,-40,-40,-50,-50,-40,-40,-30,
    -30,-40,-40,-50,-50,-40,-40,-30,
    -30,-40,-40,-50,-50,-40,-40,-30,
    -30,-40,-40,-50,-50,-40,-40,-30,
    -20,-30,-30,-40,-40,-30,-30,-20,
    -10,-20,-20,-20,-20,-20,-20,-10,
     20, 20,  0,  0,  0,  0, 20, 20,
     20, 30, 10,  0,  0, 10, 30, 20,
    ],
]

# [King (end game), Pawn, Knight, Bishop, Rook, Queen, King]
PIECE_VALUES = [0, 100, 320, 330, 500, 900, 0]


class BlueRose:
    def __init__(self):
        self.board = chess.Board()

    def board_evaluation(self):
        score = 0
        for square, piece in self.board.piece_map().items():
            pt = piece.piece_type
            if pt == chess.KING and self.board.fullmove_number > MOVES_TO_ENDGAME:
                pt = 0
            color = 1 if piece.color else -1

            piece_value = PIECE_VALUES[pt]
            position_adjustment = POSITION_VALUES[pt][square]
            score += color * (piece_value + position_adjustment)

        return score

    def negamax(self, depth, alpha, beta, time_limit):
        global kill_search
        if kill_search or time.time() > time_limit:
            return None, None, 0

        if self.board.is_checkmate():
            score = -MAX_SCORE
            return score, None, 1

        if self.board.is_stalemate():
            return 0, None, 1

        if self.board.is_insufficient_material():
            return 0, None, 1

        if self.board.is_repetition(3):
            return 0, None, 1

        if depth == 0:
            score = self.board_evaluation()
            if not self.board.turn:
                score = -score

            return score, None, 1

        best_score = -MAX_SCORE - 1
        best_move = None

        nodes = 0
        for move in self.board.legal_moves:
            self.board.push(move)
            value, _, new_nodes = self.negamax(depth - 1, -beta, -alpha, time_limit)
            self.board.pop()

            nodes += new_nodes

            if value is None:
                return None, None, nodes

            value = -value
            if value > best_score:
                best_score, best_move = value, move

            alpha = max(value, alpha)
            if alpha >= beta:
                break

        return best_score, best_move, nodes

    def ai(self, move_time):
        t1 = time.time()
        time_limit = t1 + move_time
        depth = 1
        color = [-1, 1][self.board.turn]
        best_score, best_move, nodes = self.negamax(depth, -MAX_SCORE, MAX_SCORE, time_limit)
        if best_move is None or best_score is None:
            return 0, list(self.board.legal_moves)[0]

        best_score *= color
        time_ms = int((time.time() - t1) * 1000) + 1
        nps = int(nodes/time_ms * 1000)
        print(f'info depth 1 multipv 1 score cp {100*best_score} nodes {nodes} nps {nps} time {time_ms} pv {self.board.uci(best_move)}', flush=True)

        while True:
            if best_score == color*MAX_SCORE:
                return best_score, best_move

            depth += 1
            new_score, new_move, new_nodes = self.negamax(depth, -MAX_SCORE, MAX_SCORE, time_limit)
            nodes += new_nodes

            if new_score is None:
                break

            best_score = color*new_score
            best_move = new_move

            time_ms = int((time.time() - t1) * 1000) + 1
            nps = int(nodes/time_ms * 1000)
            print(f'info depth {depth} multipv 1 score cp {100*best_score} nodes {nodes} nps {nps} time {time_ms} pv {self.board.uci(best_move)}', flush=True)

        return best_score, best_move

    def uci(self, command):
        if command == 'uci':
            print('id name BlueRose 1', flush=True)
            print('id author Brian Pomerantz', flush=True)
            print('uciok', flush=True)

        elif command == 'isready':
            print('readyok', flush=True)

        elif command == 'ucinewgame':
            self.board = chess.Board()

        elif 'position' in command:
            mi = -1
            if 'moves' in command:
                mi = command.index('moves') - 1
                fen = command[9:mi]
            else:
                fen = command[9:]

            if fen == 'startpos':
                fen = chess.STARTING_FEN

            self.board = chess.Board(fen)

            if mi != -1:
                moves_list = command[mi+1:].split()[1:]
                for move in moves_list:
                    move_obj = chess.Move.from_uci(move)
                    self.board.push(move_obj)

        elif 'go' in command:
            time_str = 'wtime' if self.board.turn else 'btime'
            if time_str in command:
                args = command.split()
                idx = args.index(time_str) + 1
                time_left = int(args[idx]) / 1000
                time_denom = TIME_DENOM if self.board.ply() > 20 else TIME_DENOM * 1.5
                time_limit = time_left // time_denom

            else:
                time_limit = 30

            _, move = self.ai(time_limit)
            print(f'bestmove {self.board.uci(move)}', flush=True)
            global kill_search
            kill_search = False


if __name__ == '__main__':
    engine = BlueRose()
    global kill_search
    kill_search = False
    print('BlueRose 1 by Brian Pomerantz', flush=True)
    f = open("uci.log", 'w')
    while True:
        uci_input = input()
        f.write(uci_input + '\n')
        if uci_input == 'stop':
            kill_search = True
            continue
        if uci_input == 'quit':
            break
        x = threading.Thread(target=engine.uci, args=(uci_input,), daemon=True)
        x.start()
